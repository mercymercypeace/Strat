local library = {flags = {}, windows = {}, open = true}

--Services
local runService = game:GetService"RunService"
local tweenService = game:GetService"TweenService"
local textService = game:GetService"TextService"
local inputService = game:GetService"UserInputService"

--Locals
local dragging, dragInput, dragStart, startPos, dragObject

local blacklistedKeys = {
    Enum.KeyCode.Unknown,Enum.KeyCode.W,Enum.KeyCode.A,Enum.KeyCode.S,Enum.KeyCode.D,Enum.KeyCode.Slash,Enum.KeyCode.Tab,Enum.KeyCode.Backspace,Enum.KeyCode.Escape
}
local whitelistedMouseinputs = {
    Enum.UserInputType.MouseButton1,Enum.UserInputType.MouseButton2,Enum.UserInputType.MouseButton3
}

--Functions
local function round(num, places)
    local power = 10^places
    return math.round(num * power) / power
end

local function keyCheck(x,x1)
    for _,v in next, x1 do
        if v == x then
            return true
        end
    end
end

local function update(input)
    local delta = input.Position - dragStart
    local yPos = (startPos.Y.Offset + delta.Y) < -36 and -36 or startPos.Y.Offset + delta.Y
    dragObject:TweenPosition(UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, yPos), "Out", "Quint", 0.1, true)
end

local chromaColor
local rainbowTime = 5
spawn(function()
    while wait() do
        chromaColor = Color3.fromHSV(tick() % rainbowTime / rainbowTime, 1, 1)
    end
end)

function library:Create(class, properties)
    properties = typeof(properties) == "table" and properties or {}
    local inst = Instance.new(class)
    for property, value in next, properties do
        inst[property] = value
    end
    return inst
end

local function createOptionHolder(holderTitle, parent, parentTable, subHolder)
    local size = subHolder and 34 or 40
    parentTable.main = library:Create("ImageButton", {
        LayoutOrder = subHolder and parentTable.position or 0,
        Position = UDim2.new(0, 20 + (250 * (parentTable.position or 0)), 0, 20),
        Size = UDim2.new(0, 230, 0, size),
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = Color3.fromRGB(20, 20, 20),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.04,
        ClipsDescendants = true,
        Parent = parent
    })
    
    local round
    if not subHolder then
        round = library:Create("ImageLabel", {
            Size = UDim2.new(1, 0, 0, size),
            BackgroundTransparency = 1,
            Image = "rbxassetid://3570695787",
            ImageColor3 = parentTable.open and Color3.fromRGB(10, 10, 10) or Color3.fromRGB(6, 6, 6),
            ScaleType = Enum.ScaleType.Slice,
            SliceCenter = Rect.new(100, 100, 100, 100),
            SliceScale = 0.04,
            Parent = parentTable.main
        })
    end
    
    local title = library:Create("TextLabel", {
        Size = UDim2.new(1, 0, 0, size),
        BackgroundTransparency = subHolder and 0 or 1,
        BackgroundColor3 = Color3.fromRGB(10, 10, 10),
        BorderSizePixel = 0,
        Text = holderTitle,
        TextSize = subHolder and 16 or 17,
        Font = Enum.Font.GothamBold,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        Parent = parentTable.main
    })
    
    local closeHolder = library:Create("Frame", {
        Position = UDim2.new(1, 0, 0, 0),
        Size = UDim2.new(-1, 0, 1, 0),
        SizeConstraint = Enum.SizeConstraint.RelativeYY,
        BackgroundTransparency = 1,
        Parent = title
    })
    
    local close = library:Create("ImageLabel", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, -size - 10, 1, -size - 10),
        Rotation = parentTable.open and 90 or 180,
        BackgroundTransparency = 1,
        Image = "rbxassetid://4918373417",
        ImageColor3 = parentTable.open and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(30, 30, 30),
        ScaleType = Enum.ScaleType.Fit,
        Parent = closeHolder
    })
    
    parentTable.content = library:Create("Frame", {
        Position = UDim2.new(0, 0, 0, size),
        Size = UDim2.new(1, 0, 1, -size),
        BackgroundTransparency = 1,
        Parent = parentTable.main
    })
    
    local layout = library:Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = parentTable.content
    })
    
    layout.Changed:connect(function()
        parentTable.content.Size = UDim2.new(1, 0, 0, layout.AbsoluteContentSize.Y)
        parentTable.main.Size = #parentTable.options > 0 and parentTable.open and UDim2.new(0, 230, 0, layout.AbsoluteContentSize.Y + size) or UDim2.new(0, 230, 0, size)
    end)
    
    if not subHolder then
        library:Create("UIPadding", {
            Parent = parentTable.content
        })
        
        title.InputBegan:connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragObject = parentTable.main
                dragging = true
                dragStart = input.Position
                startPos = dragObject.Position
            end
        end)
        title.InputChanged:connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                dragInput = input
            end
        end)
        title.InputEnded:connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
    end
    
    closeHolder.InputBegan:connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            parentTable.open = not parentTable.open
            tweenService:Create(close, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = parentTable.open and 90 or 180, ImageColor3 = parentTable.open and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(30, 30, 30)}):Play()
            if subHolder then
                tweenService:Create(title, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = parentTable.open and Color3.fromRGB(16, 16, 16) or Color3.fromRGB(10, 10, 10)}):Play()
            else
                tweenService:Create(round, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = parentTable.open and Color3.fromRGB(10, 10, 10) or Color3.fromRGB(6, 6, 6)}):Play()
            end
            parentTable.main:TweenSize(#parentTable.options > 0 and parentTable.open and UDim2.new(0, 230, 0, layout.AbsoluteContentSize.Y + size) or UDim2.new(0, 230, 0, size), "Out", "Quad", 0.2, true)
        end
    end)

    function parentTable:SetTitle(newTitle)
        title.Text = tostring(newTitle)
    end
    
    return parentTable
end

local function createLabel(option, parent)
    local main = library:Create("TextLabel", {
        LayoutOrder = option.position,
        Size = UDim2.new(1, 0, 0, 26),
        BackgroundTransparency = 1,
        Text = " " .. option.text,
        TextSize = 17,
        Font = Enum.Font.Gotham,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = parent.content
    })
    
    setmetatable(option, {__newindex = function(t, i, v)
        if i == "Text" then
            main.Text = " " .. tostring(v)
        end
    end})
end

function createToggle(option, parent)
    local main = library:Create("TextLabel", {
        LayoutOrder = option.position,
        Size = UDim2.new(1, 0, 0, 31),
        BackgroundTransparency = 1,
        Text = " " .. option.text,
        TextSize = 17,
        Font = Enum.Font.Gotham,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = parent.content
    })
    
    local tickboxOutline = library:Create("ImageLabel", {
        Position = UDim2.new(1, -6, 0, 4),
        Size = UDim2.new(-1, 10, 1, -10),
        SizeConstraint = Enum.SizeConstraint.RelativeYY,
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = option.state and Color3.fromRGB(255, 65, 65) or Color3.fromRGB(100, 100, 100),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.02,
        Parent = main
    })
    
    local tickboxInner = library:Create("ImageLabel", {
        Position = UDim2.new(0, 2, 0, 2),
        Size = UDim2.new(1, -4, 1, -4),
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = option.state and Color3.fromRGB(255, 65, 65) or Color3.fromRGB(20, 20, 20),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.02,
        Parent = tickboxOutline
    })
    
    local checkmarkHolder = library:Create("Frame", {
        Position = UDim2.new(0, 4, 0, 4),
        Size = option.state and UDim2.new(1, -8, 1, -8) or UDim2.new(0, 0, 1, -8),
        BackgroundTransparency = 1,
        ClipsDescendants = true,
        Parent = tickboxOutline
    })
    
    local checkmark = library:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        SizeConstraint = Enum.SizeConstraint.RelativeYY,
        BackgroundTransparency = 1,
        Image = "rbxassetid://4919148038",
        ImageColor3 = Color3.fromRGB(20, 20, 20),
        Parent = checkmarkHolder
    })
    
    local inContact
    main.InputBegan:connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            option:SetState(not option.state)
        end
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            inContact = true
            if not option.state then
                tweenService:Create(tickboxOutline, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(140, 140, 140)}):Play()
            end
        end
    end)
    
    main.InputEnded:connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            inContact = false
            if not option.state then
                tweenService:Create(tickboxOutline, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(100, 100, 100)}):Play()
            end
        end
    end)
    
    function option:SetState(state)
        library.flags[self.flag] = state
        self.state = state
        checkmarkHolder:TweenSize(option.state and UDim2.new(1, -8, 1, -8) or UDim2.new(0, 0, 1, -8), "Out", "Quad", 0.2, true)
        tweenService:Create(tickboxInner, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = state and Color3.fromRGB(255, 65, 65) or Color3.fromRGB(20, 20, 20)}):Play()
        if state then
            tweenService:Create(tickboxOutline, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(255, 65, 65)}):Play()
        else
            if inContact then
                tweenService:Create(tickboxOutline, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(140, 140, 140)}):Play()
            else
                tweenService:Create(tickboxOutline, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(100, 100, 100)}):Play()
            end
        end
        self.callback(state)
    end

    if option.state then
        delay(1, function() option.callback(true) end)
    end
end

local function createBox(option, parent)
    local main = library:Create("Frame", {
        LayoutOrder = option.position,
        Size = UDim2.new(1, 0, 0, 52),
        BackgroundTransparency = 1,
        Parent = parent.content
    })
    
    local outline = library:Create("ImageLabel", {
        Position = UDim2.new(0, 6, 0, 4),
        Size = UDim2.new(1, -12, 1, -10),
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = Color3.fromRGB(60, 60, 60),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.02,
        Parent = main
    })
    
    local round = library:Create("ImageLabel", {
        Position = UDim2.new(0, 8, 0, 6),
        Size = UDim2.new(1, -16, 1, -14),
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = Color3.fromRGB(20, 20, 20),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.01,
        Parent = main
    })
    
    local title = library:Create("TextLabel", {
        Position = UDim2.new(0, 12, 0, 8),
        Size = UDim2.new(1, -24, 0, 14),
        BackgroundTransparency = 1,
        Text = option.text,
        TextSize = 14,
        Font = Enum.Font.GothamBold,
        TextColor3 = Color3.fromRGB(100, 100, 100),
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = main
    })
    
    local inputvalue = library:Create("TextBox", {
        Position = UDim2.new(0, 12, 0, 20),
        Size = UDim2.new(1, -24, 0, 24),
        BackgroundTransparency = 1,
        Text = option.value,
        TextSize = 18,
        Font = Enum.Font.Gotham,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true,
        Parent = main
    })
    
    local inContact
    local focused
    main.InputBegan:connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            if not focused then inputvalue:CaptureFocus() end
        end
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            inContact = true
            if not focused then
                tweenService:Create(outline, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(100, 100, 100)}):Play()
            end
        end
    end)
    
    main.InputEnded:connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            inContact = false
            if not focused then
                tweenService:Create(outline, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(60, 60, 60)}):Play()
            end
        end
    end)
    
    inputvalue.Focused:connect(function()
        focused = true
        tweenService:Create(outline, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(255, 65, 65)}):Play()
    end)
    
    inputvalue.FocusLost:connect(function(enter)
        focused = false
        tweenService:Create(outline, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(60, 60, 60)}):Play()
        option:SetValue(inputvalue.Text, enter)
    end)
    
    function option:SetValue(value, enter)
        library.flags[self.flag] = tostring(value)
        self.value = tostring(value)
        inputvalue.Text = self.value
        self.callback(value, enter)
    end
end

local function loadOptions(option, holder)
    for _,newOption in next, option.options do
        if newOption.type == "label" then
            createLabel(newOption, option)
        elseif newOption.type == "toggle" then
            createToggle(newOption, option)
        elseif newOption.type == "box" then
            createBox(newOption, option)
        end
    end
end

local function getFnctions(parent)
    function parent:AddLabel(option)
        option = typeof(option) == "table" and option or {}
        option.text = tostring(option.text)
        option.type = "label"
        option.position = #self.options
        table.insert(self.options, option)
        return option
    end
    
    function parent:AddToggle(option)
        option = typeof(option) == "table" and option or {}
        option.text = tostring(option.text)
        option.state = typeof(option.state) == "boolean" and option.state or false
        option.callback = typeof(option.callback) == "function" and option.callback or function() end
        option.type = "toggle"
        option.position = #self.options
        option.flag = option.flag or option.text
        library.flags[option.flag] = option.state
        table.insert(self.options, option)
        return option
    end
    
    function parent:AddBox(option)
        option = typeof(option) == "table" and option or {}
        option.text = tostring(option.text)
        option.value = tostring(option.value or "")
        option.callback = typeof(option.callback) == "function" and option.callback or function() end
        option.type = "box"
        option.position = #self.options
        option.flag = option.flag or option.text
        library.flags[option.flag] = option.value
        table.insert(self.options, option)
        return option
    end
end

function library:CreateWindow(title)
    local window = {title = tostring(title), options = {}, open = true, canInit = true, init = false, position = #self.windows}
    getFnctions(window)
    table.insert(library.windows, window)
    return window
end

function library:Init()
    self.base = self.base or self:Create("ScreenGui")
    if (syn and syn.protect_gui) then
        syn.protect_gui(self.base)
        self.base.Parent = game:GetService"CoreGui"
    elseif type(get_hidden_gui) == 'function' then
        self.base.Parent = get_hidden_gui()
    elseif type(gethui) == 'function' then
        self.base.Parent = gethui()
    else
        self.base.Name = tostring(math.random())
        self.base.Parent = game:GetService"CoreGui"
    end
    
    self.cursor = self.cursor or self:Create("Frame", {
        ZIndex = 100,
        AnchorPoint = Vector2.new(0, 0),
        Size = UDim2.new(0, 5, 0, 5),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        Parent = self.base
    })
    
    for _, window in next, self.windows do
        if window.canInit and not window.init then
            window.init = true
            createOptionHolder(window.title, self.base, window)
            loadOptions(window)
        end
    end
end

function library:Close()
    self.open = not self.open
    self.cursor.Visible = self.open
    for _, window in next, self.windows do
        if window.main then
            window.main.Visible = self.open
        end
    end
end

inputService.InputChanged:connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and library.cursor then
        local mouse = inputService:GetMouseLocation() + Vector2.new(0, -36)
        library.cursor.Position = UDim2.new(0, mouse.X - 2, 0, mouse.Y - 2)
    end
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Gumdrop Collector Script
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local workspace = game:GetService("Workspace")

local range = 20
local interval = 10
local enabled = false

local function getRootPart()
    local character = player.Character
    if not character then
        character = player.CharacterAdded:Wait()
    end
    return character:WaitForChild("HumanoidRootPart")
end

local function findNearestGumdrop(rootPart)
    local nearest = nil
    local shortestDist = math.huge
    
    local pickups = workspace:FindFirstChild("Pickups")
    
    if pickups then
        for i, v in pairs(pickups:GetChildren()) do
            if v:IsA("BasePart") then
                local dist = (v.Position - rootPart.Position).magnitude
                if dist <= range and dist < shortestDist then
                    shortestDist = dist
                    nearest = v
                end
            end
        end
    end
    
    return nearest, shortestDist
end

spawn(function()
    local root = getRootPart()
    
    while true do
        if enabled then
            if not root.Parent or not root.Parent.Parent then
                root = getRootPart()
            end
            
            local gumdrop = findNearestGumdrop(root)
            
            if gumdrop then
                local pos = gumdrop.Position + Vector3.new(0, root.Size.Y / 2 + 0.1, 0)
                root.CFrame = CFrame.new(pos)
            end
        end
        
        wait(interval)
    end
end)

local window = library:CreateWindow("Gumdrop Collector")

window:AddLabel({text = "Auto Gumdrop Farm"})

window:AddToggle({
    text = "Enable Auto Collect",
    state = false,
    callback = function(value)
        enabled = value
    end
})

window:AddBox({
    text = "Detection Range",
    value = "20",
    callback = function(value)
        local num = tonumber(value)
        if num then
            range = num
        end
    end
})

window:AddBox({
    text = "Check Interval",
    value = "10",
    callback = function(value)
        local num = tonumber(value)
        if num then
            interval = num
        end
    end
})

library:Init()
